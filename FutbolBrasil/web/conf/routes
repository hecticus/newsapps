# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

OPTIONS /*url                                                                                               controllers.Application.options(url: String)

GET     /check/*name                                                                                        controllers.Application.checkFile(name: String)
GET     /api/loading/:width/:height/:version/:so                                                            controllers.Application.getAppSettings(width: Integer, height: Integer, version : String, so : String)

# Home page

GET     /                      		                                                                        controllers.Application.index(p:Int ?= 0, s ?= "sort", o ?= "asc", f ?= "")
GET     /index                                                                                              controllers.Application.index(p:Int ?= 0, s ?= "sort", o ?= "asc", f ?= "")
GET     /news/list         			                                                                        controllers.news.NewsController.getNews()
GET     /news/:id         			                                                                        controllers.Application.getNewsById(id:Long)

#FAKE UPSTREAM URL
POST    /api/v1/clients/upstream/game/user/subscribe                                                        controllers.client.Clients.upstreamFakeCreate()
POST    /api/v1/clients/upstream/game/user/login                                                            controllers.client.Clients.upstreamFakeLogin()
POST    /api/v1/clients/upstream/game/user/status                                                           controllers.client.Clients.upstreamFakeStatus()
POST    /api/v1/clients/upstream/game/user/password                                                         controllers.client.Clients.upstreamFakeResetPass()
POST    /api/v1/clients/upstream/game/user/event                                                            controllers.client.Clients.upstreamFakeEventSend()

# Authenticate
GET     /restricted                                                                                         controllers.Application.restricted
GET     /assets/javascript/routes.js                                                                        controllers.Application.jsRoutes

GET     /profile                                                                                            controllers.Application.profile

GET     /login                                                                                              controllers.Application.login
POST    /login                                                                                              controllers.Application.doLogin

GET     /logout                                                                                             com.feth.play.module.pa.controllers.Authenticate.logout
GET     /authenticate/:provider                                                                             com.feth.play.module.pa.controllers.Authenticate.authenticate(provider: String)

GET     /signup                                                                                             controllers.Application.signup
POST    /signup                                                                                             controllers.Application.doSignup

GET     /accounts/unverified        		                                                                controllers.Signup.unverified
GET     /authenticate/:provider/denied    	                                                                controllers.Signup.oAuthDenied(provider: String)

GET     /accounts/verify/:token                                                                             controllers.Signup.verify(token: String)
GET     /accounts/exists                                                                                    controllers.Signup.exists

GET     /accounts/password/reset/:token                                                                     controllers.Signup.resetPassword(token: String)
POST    /accounts/password/reset                                                                            controllers.Signup.doResetPassword

GET    /accounts/password/change                                                                            controllers.Account.changePassword
POST   /accounts/password/change                                                                            controllers.Account.doChangePassword

GET     /accounts/verify                                                                                    controllers.Account.verifyEmail

GET     /accounts/add                                                                                       controllers.Account.link

GET     /accounts/link                                                                                      controllers.Account.askLink
POST    /accounts/link                                                                                      controllers.Account.doLink

GET     /accounts/merge                                                                                     controllers.Account.askMerge
POST    /accounts/merge                                                                                     controllers.Account.doMerge

GET     /login/password/forgot                                                                              controllers.Signup.forgotPassword(email: String ?= "")
POST    /login/password/forgot                                                                              controllers.Signup.doForgotPassword

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                                                                                       controllers.Assets.at(path="/public", file)

#FOOTBALL NEWS

GET     /resource/list   			                                                                        controllers.news.NewsController.getResource()
POST    /resource/update                                                                                    controllers.news.NewsController.upResource()

#Clients
POST    /futbolbrasil/v1/clients/create                                                                     controllers.client.Clients.create()
POST    /futbolbrasil/v1/clients/update/:id                                                                 controllers.client.Clients.update(id : Integer)
POST    /futbolbrasil/v1/clients/delete/:id                                                                 controllers.client.Clients.delete(id : Integer)
POST    /futbolbrasil/v1/clients/upstream/resetpass                                                         controllers.client.Clients.resetUpstreamPass()
GET     /futbolbrasil/v1/clients/get/:id/:upstreamChannel                                                   controllers.client.Clients.get(id : Integer, upstreamChannel : String, pmc : Boolean?=false)
GET     /futbolbrasil/v1/clients/list                                                                       controllers.client.Clients.list(pageSize: Integer?=0, page: Integer?=0, pmc : Boolean?=false)
GET     /futbolbrasil/v1/clients/alerts/:id                                                                 controllers.client.Clients.getPushAlertsForClient(id : Integer)
GET     /futbolbrasil/v1/clients/bets/get/:id/:idCompetition                                                controllers.client.Clients.getBetsForCompetition(id : Integer, idCompetition : Integer)
GET     /futbolbrasil/v1/clients/bets/get/:id                                                               controllers.client.Clients.getBets(id : Integer)
POST    /futbolbrasil/v1/clients/bets/create/:id                                                            controllers.client.Clients.createBets(id : Integer)


GET     /futbolbrasil/v1/clients/leaderboard/get/:id/:idTournament/:idPhase                           controllers.client.Clients.getLeaderboardForClient(id : Integer, idTournament : Integer, idPhase : Integer)
GET     /futbolbrasil/v1/clients/leaderboard/global/get/:id/:idTournament                             controllers.client.Clients.getLeaderboardForClient(id : Integer, idTournament : Integer, idPhase : Integer?=0)
GET     /futbolbrasil/v1/clients/leaderboard/personal/tournament/:id                                  controllers.client.Clients.getPersonalLeaderboardForClient(id: Integer, idTournament: Integer?=0, idPhase: Integer?=0, global : Boolean?=true)
GET     /futbolbrasil/v1/clients/leaderboard/personal/phase/:id                                       controllers.client.Clients.getPersonalLeaderboardForClient(id: Integer, idTournament: Integer?=0, idPhase: Integer?=0, global : Boolean?=false)

#Clients PMC
GET     /futbolbrasil/v1/clients/pmc/get/:id                                                                controllers.client.Clients.get(id : Integer, upstreamChannel : String?="Android", pmc : Boolean?=true)
GET     /futbolbrasil/v1/clients/pmc/list/:page/:pageSize                                                   controllers.client.Clients.list(pageSize: Integer, page: Integer, pmc : Boolean?=true)
POST    /futbolbrasil/v1/clients/pmc/clean                                                                  controllers.client.Clients.cleanDevices()

#FAKE UPSTREAM URL
POST    /futbolbrasil/v1/clients/upstream/game/user/subscribe                                               controllers.client.Clients.upstreamFakeCreate()
POST    /futbolbrasil/v1/clients/upstream/game/user/login                                                   controllers.client.Clients.upstreamFakeLogin()
POST    /futbolbrasil/v1/clients/upstream/game/user/status                                                  controllers.client.Clients.upstreamFakeStatus()
POST    /futbolbrasil/v1/clients/upstream/game/user/password                                                controllers.client.Clients.upstreamFakeResetPass()
POST    /futbolbrasil/v1/clients/upstream/game/user/event                                                   controllers.client.Clients.upstreamFakeEventSend()


GET     /futbolbrasil/v1/clients/scorers/:idClient                                                          controllers.client.FootballManager.getScorers(idClient : Integer)

#V2 RESTify routes

#Clients
POST    /futbolbrasil/v2/client                                                                             controllers.client.Clients.create()
GET     /futbolbrasil/v2/client/:id                                                                         controllers.client.Clients.get(id : Integer, upstreamChannel : String ?= "Android", pmc : Boolean ?= false)
PUT     /futbolbrasil/v2/client/:id                                                                         controllers.client.Clients.update(id : Integer)
DELETE  /futbolbrasil/v2/client/:id                                                                         controllers.client.Clients.delete(id : Integer)
GET     /futbolbrasil/v2/client/:id/alerts                                                                  controllers.client.Clients.getPushAlertsForClient(id : Integer)
POST    /futbolbrasil/v2/client/:id/bet                                                                     controllers.client.Clients.createBet(id : Integer)
POST    /futbolbrasil/v2/client/:id/bets                                                                    controllers.client.Clients.createBets(id : Integer)
GET     /futbolbrasil/v2/client/:id/bets                                                                    controllers.client.Clients.getBets(id : Integer)
GET     /futbolbrasil/v2/client/:id/bets/:idCompetition                                                     controllers.client.Clients.getBetsForCompetition(id : Integer, idCompetition : Integer)
GET     /futbolbrasil/v2/client/:id/leaderboard/global/:idTournament                                        controllers.client.Clients.getLeaderboardForClient(id : Integer, idTournament : Integer, idPhase : Integer?=0)
GET     /futbolbrasil/v2/client/:id/leaderboard/personal/tournament                                         controllers.client.Clients.getPersonalLeaderboardForClient(id: Integer, idTournament: Integer?=0, idPhase: Integer?=0, global : Boolean?=true)
GET     /futbolbrasil/v2/client/:id/leaderboard/personal/phase                                              controllers.client.Clients.getPersonalLeaderboardForClient(id: Integer, idTournament: Integer?=0, idPhase: Integer?=0, global : Boolean?=false)
POST    /futbolbrasil/v2/client/:id/upstream                                                                controllers.client.Clients.sendClientEvent(id : Integer)
GET     /futbolbrasil/v2/clients                                                                            controllers.client.Clients.list(pageSize: Integer?=0, page: Integer?=0, pmc : Boolean?=false)





GET     /futbolbrasil/v1/languages                                                                          controllers.client.Clients.getActiveLanguages()

#funciones para obtener imagenes locales
#GET     /futbolbrasil/v1/localimages/:file/:size                                                           controllers.ImageProcessing.getLocalResourceBySize(file : String, size : String)
#imagen width and height
GET     /futbolbrasil/v1/localimages/:file/:width                                                           controllers.ImageProcessing.getLocalResourceByWidth(file : String, width : Integer)