# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~



OPTIONS        /*url                                                                      controllers.Application.options(url: String)

GET            /                                                                          controllers.Wap.index()
GET            /index                                                                     controllers.Wap.index()
GET            /news/:id                                                                  controllers.Wap.news(id:Integer)
GET            /matches                                                                   controllers.Wap.matches(id:Integer, page: Integer)
GET            /competitions                                                              controllers.Wap.competitions(route:String)
GET            /scorers                                                                   controllers.Wap.scorers(id:Integer)
GET            /mtm                                                                       controllers.Wap.mtm(id:Integer, match:Integer, event: Integer)
GET            /login                                                                     controllers.Wap.getLogin()
POST           /login/password                                                            controllers.Wap.getPassword()
POST           /login/create                                                              controllers.Wap.createClient()

GET            /check/*name                                                               controllers.Application.checkFile(name: String)
GET            /api/loading/:width/:height/:version/:so                                   controllers.Application.getAppSettings(width: Integer, height: Integer, version : String, so : String)

# Home page

#GET     /                      		                                                                     controllers.Application.index(p:Int ?= 0, s ?= "sort", o ?= "asc", f ?= "")
#GET     /index                                                                                              controllers.Application.index(p:Int ?= 0, s ?= "sort", o ?= "asc", f ?= "")
#GET     /news/list         			                                                                    controllers.news.NewsController.getNews()
#GET     /news/:id         			                                                                        controllers.Application.getNewsById(id:Long)


# Map static resources from the /public folder to the /assets URL path
GET            /assets/*file                                                              controllers.Assets.at(path="/public", file)

#FOOTBALL NEWS

GET            /resource/list                                                             controllers.news.NewsController.getResource()
POST           /resource/update                                                           controllers.news.NewsController.upResource()

#Clients
POST           /futbolbrasil/v1/clients/create                                            controllers.client.FootballClients.create()
POST           /futbolbrasil/v1/clients/update/:id                                        controllers.client.FootballClients.update(id : Integer)
POST           /futbolbrasil/v1/clients/delete/:id                                        controllers.client.Clients.delete(id : Integer)
GET            /futbolbrasil/v1/clients/get/:id/:upstreamChannel                          controllers.client.FootballClients.get(id : Integer, upstreamChannel : String, pmc : Boolean?=false)
GET            /futbolbrasil/v1/clients/list                                              controllers.client.Clients.list(pageSize: Integer?=0, page: Integer?=0, pmc : Boolean?=false)
GET            /futbolbrasil/v1/clients/alerts/:id                                        controllers.client.FootballClients.getPushAlertsForClient(id : Integer)
GET            /futbolbrasil/v1/clients/bets/get/:id/:idCompetition                       controllers.client.FootballClients.getBetsForCompetition(id : Integer, idCompetition : Integer)
GET            /futbolbrasil/v1/clients/bets/get/date/:id/:date                           controllers.client.FootballClients.getBetsForDate(id : Integer, date : String)
GET            /futbolbrasil/v1/clients/bets/get/:id                                      controllers.client.FootballClients.getBets(id : Integer)
POST           /futbolbrasil/v1/clients/bets/create/:id                                   controllers.client.FootballClients.createBets(id : Integer)
GET            /futbolbrasil/v1/clients/dashboard/:id/:idLanguage                         controllers.client.FootballClients.dashboard(id : Integer, idLanguage : Integer)


GET            /futbolbrasil/v1/clients/leaderboard/get/:id/:idTournament/:idPhase        controllers.client.FootballClients.getLeaderboardForClient(id : Integer, idTournament : Integer, idPhase : Integer)
GET            /futbolbrasil/v1/clients/leaderboard/global/get/:id/:idTournament          controllers.client.FootballClients.getLeaderboardForClient(id : Integer, idTournament : Integer, idPhase : Integer?=0)
GET            /futbolbrasil/v1/clients/leaderboard/personal/tournament/:id               controllers.client.FootballClients.getPersonalLeaderboardForClient(id: Integer, idTournament: Integer?=0, idPhase: Integer?=0, global : Boolean?=true)
GET            /futbolbrasil/v1/clients/leaderboard/personal/phase/:id                    controllers.client.FootballClients.getPersonalLeaderboardForClient(id: Integer, idTournament: Integer?=0, idPhase: Integer?=0, global : Boolean?=false)
GET            /futbolbrasil/v1/clients/leaderboard/total/:id                             controllers.client.FootballClients.getLeaderboardTotalForClient(id: Integer)


GET            /futbolbrasil/v1/clients/scorers/:idClient                                 controllers.client.FootballManager.getScorers(idClient : Integer)


GET            /futbolbrasil/v1/languages                                                 controllers.client.Clients.getActiveLanguages()

#funciones para obtener imagenes locales
#GET     /futbolbrasil/v1/localimages/:file/:size                                                           controllers.ImageProcessing.getLocalResourceBySize(file : String, size : String)
#imagen width and height
GET            /futbolbrasil/v1/localimages/:file/:width                                  controllers.ImageProcessing.getLocalResourceByWidth(file : String, width : Integer)


#V2 RESTify routes

#Clients
POST           /futbolbrasil/v2/client                                                    controllers.client.FootballClients.create()
GET            /futbolbrasil/v2/client/:id                                                controllers.client.FootballClients.get(id : Integer, upstreamChannel : String ?= "Android", pmc : Boolean ?= false)
PUT            /futbolbrasil/v2/client/:id                                                controllers.client.FootballClients.update(id : Integer)
DELETE         /futbolbrasil/v2/client/:id                                                controllers.client.Clients.delete(id : Integer)
GET            /futbolbrasil/v2/client/:id/alerts                                         controllers.client.FootballClients.getPushAlertsForClient(id : Integer)
POST           /futbolbrasil/v2/client/:id/bet                                            controllers.client.FootballClients.createBet(id : Integer)
POST           /futbolbrasil/v2/client/:id/bets                                           controllers.client.FootballClients.createBets(id : Integer)
GET            /futbolbrasil/v2/client/:id/bets                                           controllers.client.FootballClients.getBets(id : Integer)
GET            /futbolbrasil/v2/client/:id/bets/:idCompetition                            controllers.client.FootballClients.getBetsForCompetition(id : Integer, idCompetition : Integer)
GET            /futbolbrasil/v2/client/:id/leaderboard/global/:idTournament               controllers.client.FootballClients.getLeaderboardForClient(id : Integer, idTournament : Integer, idPhase : Integer?=0)
GET            /futbolbrasil/v2/client/:id/leaderboard/personal/tournament                controllers.client.FootballClients.getPersonalLeaderboardForClient(id: Integer, idTournament: Integer?=0, idPhase: Integer?=0, global : Boolean?=true)
GET            /futbolbrasil/v2/client/:id/leaderboard/personal/phase                     controllers.client.FootballClients.getPersonalLeaderboardForClient(id: Integer, idTournament: Integer?=0, idPhase: Integer?=0, global : Boolean?=false)
POST           /futbolbrasil/v2/client/:id/upstream                                       controllers.Upstream.sendClientEvent(id : Integer)
GET            /futbolbrasil/v2/clients                                                   controllers.client.Clients.list(pageSize: Integer?=0, page: Integer?=0, pmc : Boolean?=false)

GET            /futbolbrasil/v2/locale.json                                               controllers.client.FootballClients.getLocale(lang : String)
POST           /futbolbrasil/v2/locale.json                                               controllers.client.FootballClients.setLocale(lang : String)

# Home page
GET            /admin                                                                     controllers.Application.index()
# Authenticate
GET            /admin/restricted                                                          controllers.Application.restricted
GET            /admin/assets/javascript/routes.js                                         controllers.Application.jsRoutes

GET            /admin/profile                                                             controllers.Application.profile

GET            /admin/login                                                               controllers.Application.login
POST           /admin/login                                                               controllers.Application.doLogin

GET            /admin/logout                                                              com.feth.play.module.pa.controllers.Authenticate.logout
GET            /admin/authenticate/:provider                                              com.feth.play.module.pa.controllers.Authenticate.authenticate(provider: String)

GET            /admin/signup                                                              controllers.Application.signup
POST           /admin/signup                                                              controllers.Application.doSignup

GET            /admin/accounts/unverified                                                 controllers.Signup.unverified
GET            /admin/authenticate/:provider/denied                                       controllers.Signup.oAuthDenied(provider: String)

GET            /admin/accounts/verify/:token                                              controllers.Signup.verify(token: String)
GET            /admin/accounts/exists                                                     controllers.Signup.exists

GET            /admin/accounts/password/reset/:token                                      controllers.Signup.resetPassword(token: String)
POST           /admin/accounts/password/reset                                             controllers.Signup.doResetPassword

GET            /admin/accounts/password/change                                            controllers.Account.changePassword
POST           /admin/accounts/password/change                                            controllers.Account.doChangePassword

GET            /admin/accounts/verify                                                     controllers.Account.verifyEmail

GET            /admin/accounts/add                                                        controllers.Account.link

GET            /admin/accounts/link                                                       controllers.Account.askLink
POST           /accounts/link                                                             controllers.Account.doLink

GET            /admin/accounts/merge                                                      controllers.Account.askMerge
POST           /admin/accounts/merge                                                      controllers.Account.doMerge

GET            /admin/login/password/forgot                                               controllers.Signup.forgotPassword(email: String ?= "")
POST           /admin/login/password/forgot                                               controllers.Signup.doForgotPassword

#CountriesView
# CountriesView list (look at the default values for pagination parameters)
GET             /admin/countries/list                                                                 controllers.CountriesView.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET             /admin/countries/lsort                                                                controllers.CountriesView.lsort()
# Add CountriesView
GET             /admin/countries/blank                                                                controllers.CountriesView.blank()
POST            /admin/countries                                                                      controllers.CountriesView.submit()
# Edit existing CountriesView
GET             /admin/countries/sort/:ids                                                            controllers.CountriesView.sort(ids:String)
GET             /admin/countries/:id                                                                  controllers.CountriesView.edit(id:Integer)
POST            /admin/countries/:id                                                                  controllers.CountriesView.update(id:Integer)
# Delete a CountriesView
POST            /admin/countries/:id/delete                                                           controllers.CountriesView.delete(id:Integer)

#LanguagesView
# LanguagesView list (look at the default values for pagination parameters)
GET             /admin/languages/list                                                                 controllers.LanguagesView.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET             /admin/languages/lsort                                                                controllers.LanguagesView.lsort()
# Add LanguagesView
GET             /admin/languages/blank                                                                controllers.LanguagesView.blank()
POST            /admin/languages                                                                      controllers.LanguagesView.submit()
# Edit existing LanguagesView
GET             /admin/languages/sort/:ids                                                            controllers.LanguagesView.sort(ids:String)
GET             /admin/languages/:id                                                                  controllers.LanguagesView.edit(id:Integer)
POST            /admin/languages/:id                                                                  controllers.LanguagesView.update(id:Integer)
# Delete a LanguagesView
POST            /admin/languages/:id/delete                                                           controllers.LanguagesView.delete(id:Integer)

#TimezonesView
# TimezonesView list (look at the default values for pagination parameters)
GET             /admin/timezones/list                                                                 controllers.TimezonesView.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET             /admin/timezones/lsort                                                                controllers.TimezonesView.lsort()
# Add TimezonesView
GET             /admin/timezones/blank                                                                controllers.TimezonesView.blank()
POST            /admin/timezones                                                                      controllers.TimezonesView.submit()
# Edit existing TimezonesView
GET             /admin/timezones/sort/:ids                                                            controllers.TimezonesView.sort(ids:String)
GET             /admin/timezones/:id                                                                  controllers.TimezonesView.edit(id:Integer)
POST            /admin/timezones/:id                                                                  controllers.TimezonesView.update(id:Integer)
# Delete a TimezonesView
POST            /admin/timezones/:id/delete                                                           controllers.TimezonesView.delete(id:Integer)

#DevicesView
# DevicesView list (look at the default values for pagination parameters)
GET             /admin/devices/list                                                                 controllers.DevicesView.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET             /admin/devices/lsort                                                                controllers.DevicesView.lsort()
# Add DevicesView
GET             /admin/devices/blank                                                                controllers.DevicesView.blank()
POST            /admin/devices                                                                      controllers.DevicesView.submit()
# Edit existing DevicesView
GET             /admin/devices/sort/:ids                                                            controllers.DevicesView.sort(ids:String)
GET             /admin/devices/:id                                                                  controllers.DevicesView.edit(id:Integer)
POST            /admin/devices/:id                                                                  controllers.DevicesView.update(id:Integer)
# Delete a DevicesView
POST            /admin/devices/:id/delete                                                           controllers.DevicesView.delete(id:Integer)


#InstancesView
# InstancesView list (look at the default values for pagination parameters)
GET            /admin/instances/list                                                      controllers.InstancesView.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET            /admin/instances/lsort                                                     controllers.InstancesView.lsort()
# Add InstancesView
GET            /admin/instances/blank                                                     controllers.InstancesView.blank()
POST           /admin/instances                                                           controllers.InstancesView.submit()
# Edit existing InstancesView
GET            /admin/instances/sort/:ids                                                 controllers.InstancesView.sort(ids:String)
GET            /admin/instances/:id                                                       controllers.InstancesView.edit(id:Integer)
POST           /admin/instances/:id                                                       controllers.InstancesView.update(id:Integer)
# Delete a InstancesView
POST           /admin/instances/:id/delete                                                controllers.InstancesView.delete(id:Integer)

#JobsView
# JobsView list (look at the default values for pagination parameters)
GET            /admin/jobs/list                                                           controllers.JobsView.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET            /admin/jobs/lsort                                                          controllers.JobsView.lsort()
# Add JobsView
GET            /admin/jobs/blank                                                          controllers.JobsView.blank()
POST           /admin/jobs                                                                controllers.JobsView.submit()
# Edit existing JobsView
GET            /admin/jobs/sort/:ids                                                      controllers.JobsView.sort(ids:String)
GET            /admin/jobs/:id                                                            controllers.JobsView.edit(id:Long)
POST           /admin/jobs/:id                                                            controllers.JobsView.update(id:Long)
# Delete a JobsView
POST           /admin/jobs/:id/delete                                                     controllers.JobsView.delete(id:Long)

#ConfigsView
# ConfigsView list (look at the default values for pagination parameters)
GET            /admin/configurations/list                                                 controllers.ConfigsView.list(p:Int ?= 0, s ?= "configKey", o ?= "asc", f ?= "")
GET            /admin/configurations/lsort                                                controllers.ConfigsView.lsort()
# Add ConfigsView
GET            /admin/configurations/blank                                                controllers.ConfigsView.blank()
POST           /admin/configurations                                                      controllers.ConfigsView.submit()
# Edit existing ConfigsView
GET            /admin/configurations/sort/:ids                                            controllers.ConfigsView.sort(ids:String)
GET            /admin/configurations/:id                                                  controllers.ConfigsView.edit(id:Long)
POST           /admin/configurations/:id                                                  controllers.ConfigsView.update(id:Long)
# Delete a ConfigsView
POST           /admin/configurations/:id/delete                                           controllers.ConfigsView.delete(id:Long)

#UsersView
# UsersView list (look at the default values for pagination parameters)
GET            /admin/users/list                                                          controllers.UsersView.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
#GET     /admin/users/lsort		                                                                        controllers.UsersView.lsort()
# Add UsersView
# Edit existing UsersView
#GET     /admin/users/sort/:ids	                                                                        controllers.UsersView.sort(ids:String)
GET            /admin/users/:id                                                           controllers.UsersView.edit(id:Long)
POST           /admin/users/:id                                                           controllers.UsersView.update(id:Long)
# Delete a UsersView
POST           /admin/users/:id/delete                                                    controllers.UsersView.delete(id:Long)


->             /jobcore                                                                   JobCore.Routes
->             /upstream                                                                  UpstreamAPIConnector.Routes