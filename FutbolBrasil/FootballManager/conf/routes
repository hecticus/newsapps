# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET     /check/*name                controllers.Application.checkFile(name: String)

# Home page
GET     /                           controllers.Application.index()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

#ConfigsView
# ConfigsView list (look at the default values for pagination parameters)
GET     /configurations/list			                                                controllers.ConfigsView.list(p:Int ?= 0, s ?= "keyName", o ?= "asc", f ?= "")
GET     /configurations/lsort		                                                    controllers.ConfigsView.lsort()
# Add ConfigsView
GET     /configurations/blank		                                                    controllers.ConfigsView.blank()
POST    /configurations				                                                    controllers.ConfigsView.submit()
# Edit existing ConfigsView
GET     /configurations/sort/:ids	                                                    controllers.ConfigsView.sort(ids:String)
GET     /configurations/:id			                                                    controllers.ConfigsView.edit(id:Long)
POST    /configurations/:id			                                                    controllers.ConfigsView.update(id:Long)
# Delete a ConfigsView
POST    /configurations/:id/delete		                                                controllers.ConfigsView.delete(id:Long)

#NewsView
# NewsView list (look at the default values for pagination parameters)
GET     /news/list			                                                            controllers.NewsView.list(p:Int ?= 0, s ?= "title", o ?= "asc", f ?= "")
GET     /news/lsort		                                                                controllers.NewsView.lsort()
# Add NewsView
#GET     /news/blank		                                                                controllers.NewsView.blank()
#POST    /news				                                                            controllers.NewsView.submit()
# Edit existing NewsView
GET     /news/sort/:ids	                                                                controllers.NewsView.sort(ids:String)
GET     /news/:id			                                                            controllers.NewsView.edit(id:Long)
#POST    /news/:id			                                                            controllers.NewsView.update(id:Long)
# Delete a NewsView
#POST    /news/:id/delete		                                                        controllers.NewsView.delete(id:Long)


#UsersView
# UsersView list (look at the default values for pagination parameters)
GET     /users/list			                                                controllers.UsersView.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
#GET     /users/lsort		                                                    controllers.UsersView.lsort()
# Add UsersView
# Edit existing UsersView
#GET     /users/sort/:ids	                                                    controllers.UsersView.sort(ids:String)
GET     /users/:id			                                                    controllers.UsersView.edit(id:Long)
POST    /users/:id			                                                    controllers.UsersView.update(id:Long)
# Delete a UsersView
POST    /users/:id/delete		                                                controllers.UsersView.delete(id:Long)


GET      /newsapi/v1/news/search/:idApp                    controllers.news.NewsController.getNews(idApp:Integer, offset: Integer=0, count:Integer=20)
GET      /newsapi/v1/news/search/:idApp/:offset/:count     controllers.news.NewsController.getNews(idApp:Integer, offset: Integer, count:Integer)
POST     /newsapi/v1/news/resources/update                 controllers.news.NewsController.updateResources()

#afp futbol
GET     /footballapi/v1/team/getAll/:idCompetition              controllers.footballapi.AfpFutbolWs.getTeams(idCompetition: Integer)
GET     /footballapi/v1/team/get/:id                            controllers.footballapi.AfpFutbolWs.getTeam(id: Long)
GET     /footballapi/v1/phase/getList/:idComp                   controllers.footballapi.AfpFutbolWs.getPhases(idComp: Long, sd: String?="", end: String?="")
GET     /footballapi/v1/phase/get/:id                           controllers.footballapi.AfpFutbolWs.getPhase(id: Long)
GET     /footballapi/v1/matches/get                             controllers.footballapi.AfpFutbolWs.getGameMatches(phase : Long?=0,sd: String?="",ed: String?="",st: Integer?=0)
GET     /footballapi/v1/matches/get/ext/:id                     controllers.footballapi.AfpFutbolWs.getGameMatchByExternalId(id: Long,events: Boolean?=false)
GET     /footballapi/v1/matches/get/fifa/:id                    controllers.footballapi.AfpFutbolWs.getGameMatchByFifaId(id: Long,events: Boolean?=false)
GET     /footballapi/v1/matches/get/:id                         controllers.footballapi.AfpFutbolWs.getGameMatch(id: Long,events: Boolean?=false)
GET     /footballapi/v1/matches/events/get/ext/:id              controllers.footballapi.AfpFutbolWs.getEventsByExternalMatch(id: Long,act: String?="",p: String?="",ts :String?="", te :String?="")
GET     /footballapi/v1/matches/events/get/fifa/:id             controllers.footballapi.AfpFutbolWs.getEventsByFifaMatch(id: Long,act: String?="",p: String?="",ts :String?="", te :String?="")
GET     /footballapi/v1/matches/events/get/:id                  controllers.footballapi.AfpFutbolWs.getEvents(id: Long,act: String?="",p: String?="",ts :String?="", te :String?="")
GET     /footballapi/v1/ranking/get/:id                         controllers.footballapi.AfpFutbolWs.getRankingByIdPhase(id : Long, ext : Boolean = false )
GET     /footballapi/v1/ranking/get/ext/:id                     controllers.footballapi.AfpFutbolWs.getRankingByIdPhase(id : Long, ext : Boolean = true )
GET     /footballapi/v1/ranking/get/global/:id                  controllers.footballapi.AfpFutbolWs.getGlobalRanking(id : Long)

GET     /footballapi/v1/matches/finished/get/:idCompetition         controllers.footballapi.MatchesController.getTodayFinished(idCompetition : Long)
GET     /footballapi/v1/matches/finished/get/:idCompetition/:date   controllers.footballapi.MatchesController.getFinishedByDate(idCompetition : Long, date : String)
GET     /footballapi/v1/matches/date/get/:idApp/:date                          controllers.footballapi.MatchesController.getFixturesDate(idApp : Integer, date : String)


#new football api
#players
GET     /footballapi/v1/players/topScorers/:idCompetition/:date         controllers.footballapi.PlayersController.getTopScorers(idCompetition: Long, date: String)
GET     /footballapi/v1/players/competitions/scorers/:idApp             controllers.footballapi.PlayersController.getTopScorersByCompetition(idApp: Integer)

#calendar
GET     /footballapi/v1/calendar/get/:idCompetition                controllers.footballapi.MatchesController.getFixtures(idCompetition: Long)

#tvmax base ws
#GET     /tvmaxfeeds/calendar/get                    controllers.tvmaxfeeds.MatchController.getMatchs()
#GET     /tvmaxfeeds/calendar/getAll                 controllers.tvmaxfeeds.MatchController.getAllMatchs()
#GET     /tvmaxfeeds/calendar/today                  controllers.tvmaxfeeds.MatchController.getToday()
#GET     /tvmaxfeeds/calendar/today/active           controllers.tvmaxfeeds.MatchController.getActive()
#GET     /tvmaxfeeds/calendar/today/results          controllers.tvmaxfeeds.MatchController.getResults()
#GET     /tvmaxfeeds/calendar/getActive              controllers.tvmaxfeeds.MatchController.getActiveMatch()

#football manager
GET     /api/v1/rankings/get/:idApp                   controllers.footballapi.RankingController.getRankings(idApp: Integer)


# Authenticate
GET     /restricted                                                                     controllers.Application.restricted
GET     /assets/javascript/routes.js                                                    controllers.Application.jsRoutes

GET     /profile                                                                        controllers.Application.profile

GET     /login                                                                          controllers.Application.login
POST    /login                                                                          controllers.Application.doLogin

GET     /logout                                                                         com.feth.play.module.pa.controllers.Authenticate.logout
GET     /authenticate/:provider                                                         com.feth.play.module.pa.controllers.Authenticate.authenticate(provider: String)

GET     /signup                                                                         controllers.Application.signup
POST    /signup                                                                         controllers.Application.doSignup

GET     /accounts/unverified        		                                            controllers.Signup.unverified
GET     /authenticate/:provider/denied    	                                            controllers.Signup.oAuthDenied(provider: String)

GET     /accounts/verify/:token                                                         controllers.Signup.verify(token: String)
GET     /accounts/exists                                                                controllers.Signup.exists

GET     /accounts/password/reset/:token                                                 controllers.Signup.resetPassword(token: String)
POST    /accounts/password/reset                                                        controllers.Signup.doResetPassword

GET    /accounts/password/change                                                        controllers.Account.changePassword
POST   /accounts/password/change                                                        controllers.Account.doChangePassword

GET     /accounts/verify                                                                controllers.Account.verifyEmail

GET     /accounts/add                                                                   controllers.Account.link

GET     /accounts/link                                                                  controllers.Account.askLink
POST    /accounts/link                                                                  controllers.Account.doLink

GET     /accounts/merge                                                                 controllers.Account.askMerge
POST    /accounts/merge                                                                 controllers.Account.doMerge

GET     /login/password/forgot                                                          controllers.Signup.forgotPassword(email: String ?= "")
POST    /login/password/forgot                                                          controllers.Signup.doForgotPassword




