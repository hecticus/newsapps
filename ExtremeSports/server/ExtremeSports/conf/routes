# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

OPTIONS /*url                                                                           controllers.Application.options(url: String)

# Home page
GET     /                                                                               controllers.Application.index()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                                                                   controllers.Assets.at(path="/public", file)

GET     /check/*name                                                                    controllers.Application.checkFile(name: String)
GET     /api/v1/loading/:width/:height/:version/:so                                      controllers.Application.getAppSettings(width: Integer, height: Integer, version : String, so : String)

#Post
POST    /api/v1/socialnetwork								                            controllers.content.athletes.SocialNetworks.create()
PUT     /api/v1/socialnetwork/:id							                            controllers.content.athletes.SocialNetworks.update(id : Integer)
DELETE  /api/v1/socialnetwork/:id							                            controllers.content.athletes.SocialNetworks.delete(id : Integer)
GET     /api/v1/socialnetwork/:id							                            controllers.content.athletes.SocialNetworks.get(id : Integer)
GET     /api/v1/socialnetworks								                            controllers.content.athletes.SocialNetworks.list(pageSize: Integer?=0, page: Integer?=0)

#Athletes
POST    /api/v1/athlete		                                                            controllers.content.athletes.Athletes.create()
PUT    	/api/v1/athlete/:id     	                                                    controllers.content.athletes.Athletes.update(id : Integer)
DELETE 	/api/v1/athlete/:id     	                                                    controllers.content.athletes.Athletes.delete(id : Integer)
GET     /api/v1/athlete/:id	    	                                                    controllers.content.athletes.Athletes.get(id : Integer)
GET     /api/v1/athletes	                                                            controllers.content.athletes.Athletes.list(pageSize: Integer?=0, page: Integer?=0)

#Categories
POST    /api/v1/category                                                                controllers.content.posts.Categories.create()
PUT    	/api/v1/category/:id                                                            controllers.content.posts.Categories.update(id : Integer)
DELETE  /api/v1/category/:id                                                            controllers.content.posts.Categories.delete(id : Integer)
GET     /api/v1/category/:id                                                            controllers.content.posts.Categories.get(id : Integer)
GET     /api/v1/categories                                                              controllers.content.posts.Categories.list(pageSize: Integer?=0, page: Integer?=0)

#FileTypes
POST    /api/v1/filetype                                                                controllers.content.posts.FileTypes.create()
PUT    	/api/v1/filetype/:id                                                            controllers.content.posts.FileTypes.update(id : Integer)
DELETE  /api/v1/filetype/:id                                                            controllers.content.posts.FileTypes.delete(id : Integer)
GET     /api/v1/filetype/:id                                                            controllers.content.posts.FileTypes.get(id : Integer)
GET     /api/v1/filetypes                                                               controllers.content.posts.FileTypes.list(pageSize: Integer?=0, page: Integer?=0)

#Posts
POST    /api/v1/post                                                                    controllers.content.posts.Posts.create()
PUT    	/api/v1/post/:id                                                                controllers.content.posts.Posts.update(id : Integer)
DELETE  /api/v1/post/:id                                                                controllers.content.posts.Posts.delete(id : Integer)
GET     /api/v1/post/:id                                                                controllers.content.posts.Posts.get(id : Integer)
GET     /api/v1/posts                                                                   controllers.content.posts.Posts.list(pageSize: Integer?=0, page: Integer?=0)

GET     /api/v1/post/get/client/:id                                                     controllers.content.posts.Posts.getRecentPosts(id : Integer, postId: Integer?=0, newest: Boolean?=false, idAthlete: Integer?=0, idCategory: Integer?=0, onlyMedia: Boolean?=false, athletes: Boolean?=false, categories: Boolean?=false)
GET     /api/v1/post/get/client/:id/up/:postId                                          controllers.content.posts.Posts.getRecentPosts(id : Integer, postId: Integer, newest: Boolean?=true, idAthlete: Integer?=0, idCategory: Integer?=0, onlyMedia: Boolean?=false, athletes: Boolean?=false, categories: Boolean?=false)
GET     /api/v1/post/get/client/:id/down/:postId                                        controllers.content.posts.Posts.getRecentPosts(id : Integer, postId: Integer, newest: Boolean?=false, idAthlete: Integer?=0, idCategory: Integer?=0, onlyMedia: Boolean?=false, athletes: Boolean?=false, categories: Boolean?=false)

GET     /api/v1/post/get/client/:id/athlete/:idAthlete                                  controllers.content.posts.Posts.getRecentPosts(id : Integer, postId: Integer?=0, newest: Boolean?=false, idAthlete: Integer, idCategory: Integer?=0, onlyMedia: Boolean?=false, athletes: Boolean?=false, categories: Boolean?=false)
GET     /api/v1/post/get/client/:id/athlete/:idAthlete/up/:postId                       controllers.content.posts.Posts.getRecentPosts(id : Integer, postId: Integer, newest: Boolean?=true, idAthlete: Integer, idCategory: Integer?=0, onlyMedia: Boolean?=false, athletes: Boolean?=false, categories: Boolean?=false)
GET     /api/v1/post/get/client/:id/athlete/:idAthlete/down/:postId                     controllers.content.posts.Posts.getRecentPosts(id : Integer, postId: Integer, newest: Boolean?=false, idAthlete: Integer, idCategory: Integer?=0, onlyMedia: Boolean?=false, athletes: Boolean?=false, categories: Boolean?=false)

GET     /api/v1/post/get/client/:id/category/:idCategory                                controllers.content.posts.Posts.getRecentPosts(id : Integer, postId: Integer?=0, newest: Boolean?=false, idAthlete: Integer?=0, idCategory: Integer, onlyMedia: Boolean?=false, athletes: Boolean?=false, categories: Boolean?=false)
GET     /api/v1/post/get/client/:id/category/:idCategory/up/:postId                     controllers.content.posts.Posts.getRecentPosts(id : Integer, postId: Integer, newest: Boolean?=true, idAthlete: Integer?=0, idCategory: Integer, onlyMedia: Boolean?=false, athletes: Boolean?=false, categories: Boolean?=false)
GET     /api/v1/post/get/client/:id/category/:idCategory/down/:postId                   controllers.content.posts.Posts.getRecentPosts(id : Integer, postId: Integer, newest: Boolean?=false, idAthlete: Integer?=0, idCategory: Integer, onlyMedia: Boolean?=false, athletes: Boolean?=false, categories: Boolean?=false)

GET     /api/v1/media/client/:id                                                        controllers.content.posts.Posts.getMediaForGallery(id : Integer, postId: Integer?=0, newest: Boolean?=false, idAthlete: Integer?=0, idCategory: Integer?=0, onlyMedia: Boolean?=false)
GET     /api/v1/media/client/:id/up/:postId                                             controllers.content.posts.Posts.getMediaForGallery(id : Integer, postId: Integer, newest: Boolean?=true, idAthlete: Integer?=0, idCategory: Integer?=0, onlyMedia: Boolean?=false)
GET     /api/v1/media/client/:id/down/:postId                                           controllers.content.posts.Posts.getMediaForGallery(id : Integer, postId: Integer, newest: Boolean?=false, idAthlete: Integer?=0, idCategory: Integer?=0, onlyMedia: Boolean?=false)

GET     /api/v1/media/client/:id/athlete/:idAthlete                                     controllers.content.posts.Posts.getMediaForGallery(id : Integer, postId: Integer?=0, newest: Boolean?=false, idAthlete: Integer, idCategory: Integer?=0, onlyMedia: Boolean?=false)
GET     /api/v1/media/client/:id/athlete/:idAthlete/up/:postId                          controllers.content.posts.Posts.getMediaForGallery(id : Integer, postId: Integer, newest: Boolean?=true, idAthlete: Integer, idCategory: Integer?=0, onlyMedia: Boolean?=false)
GET     /api/v1/media/client/:id/athlete/:idAthlete/down/:postId                        controllers.content.posts.Posts.getMediaForGallery(id : Integer, postId: Integer, newest: Boolean?=false, idAthlete: Integer, idCategory: Integer?=0, onlyMedia: Boolean?=false)

GET     /api/v1/media/client/:id/category/:idCategory                                   controllers.content.posts.Posts.getMediaForGallery(id : Integer, postId: Integer?=0, newest: Boolean?=false, idAthlete: Integer?=0, idCategory: Integer, onlyMedia: Boolean?=false)
GET     /api/v1/media/client/:id/category/:idCategory/up/:postId                        controllers.content.posts.Posts.getMediaForGallery(id : Integer, postId: Integer, newest: Boolean?=true, idAthlete: Integer?=0, idCategory: Integer, onlyMedia: Boolean?=false)
GET     /api/v1/media/client/:id/category/:idCategory/down/:postId                      controllers.content.posts.Posts.getMediaForGallery(id : Integer, postId: Integer, newest: Boolean?=false, idAthlete: Integer?=0, idCategory: Integer, onlyMedia: Boolean?=false)

GET     /api/v1/post/get/client/:idClient/:idPost                                       controllers.content.posts.Posts.getPostForClient(idClient : Integer,idPost : Integer)
GET     /api/v1/post/get/sport/:idClient/:idCategory/:page/:pageSize                    controllers.content.posts.Posts.getPostForCategory(idClient : Integer, idCategory : Integer, page: Integer, pageSize: Integer)
GET     /api/v1/post/list                                                               controllers.content.posts.Posts.list(pageSize: Integer?=0, page: Integer?=0)
GET     /api/v1/post/list/athlete/:id                                                   controllers.content.posts.Posts.getListForAthlete(id : Integer)

#POSTS IMAGES
GET     /api/v1/posts/images/get/client/up/athlete/:id/:postId/:idAthlete               controllers.content.posts.Posts.getRecentPosts(id : Integer, postId: Integer, newest: Boolean?=true, idAthlete: Integer, idCategory: Integer?=0, onlyMedia: Boolean?=true, athletes: Boolean?=false, categories: Boolean?=false)
GET     /api/v1/posts/images/get/client/down/athlete/:id/:postId/:idAthlete             controllers.content.posts.Posts.getRecentPosts(id : Integer, postId: Integer, newest: Boolean?=false, idAthlete: Integer, idCategory: Integer?=0, onlyMedia: Boolean?=true, athletes: Boolean?=false, categories: Boolean?=false)


#Clients
POST    /api/v1/client                                                                  controllers.client.Clients.create()
PUT    	/api/v1/client/:id                                                              controllers.client.Clients.update(id : Integer)
DELETE  /api/v1/client/:id                                                              controllers.client.Clients.delete(id : Integer)
POST    /api/v1/client/upstream/resetpass                                               controllers.client.Clients.resetUpstreamPass()
POST    /api/v1/client/upstream/events/send                                             controllers.client.Clients.sendEvent()
GET     /api/v1/client/:id                                                              controllers.client.Clients.get(id : Integer, upstreamChannel : String ?= "Android", pmc : Boolean?=false)
GET     /api/v1/clients                                                                 controllers.client.Clients.list(pageSize: Integer?=0, page: Integer?=0, pmc : Boolean?=false)
GET     /api/v1/client/:id/favorite/athletes                                            controllers.client.Clients.getFavorites(id : Integer, categories : Boolean?=false)
GET     /api/v1/client/:id/favorite/categories                                          controllers.client.Clients.getFavorites(id : Integer, categories : Boolean?=true)
POST    /api/v1/client/:id/upstream                                                     controllers.client.Clients.sendClientEvent(id : Integer)

#Clients PMC
GET     /api/v1/clients/pmc/get/:id                                                     controllers.client.Clients.get(id : Integer, upstreamChannel : String?="Android", pmc : Boolean?=true)
GET     /api/v1/clients/pmc/list/:page/:pageSize                                        controllers.client.Clients.list(pageSize: Integer, page: Integer, pmc : Boolean?=true)
POST    /api/v1/clients/pmc/clean                                                       controllers.client.Clients.cleanDevices()

#FAKE UPSTREAM URL
POST    /api/v1/clients/upstream/game/user/subscribe                                    controllers.client.Clients.upstreamFakeCreate()
POST    /api/v1/clients/upstream/game/user/login                                        controllers.client.Clients.upstreamFakeLogin()
POST    /api/v1/clients/upstream/game/user/status                                       controllers.client.Clients.upstreamFakeStatus()
POST    /api/v1/clients/upstream/game/user/password                                     controllers.client.Clients.upstreamFakeResetPass()
POST    /api/v1/clients/upstream/game/user/event                                        controllers.client.Clients.upstreamFakeEventSend()

GET     /api/v1/locale.json                                                             controllers.client.Clients.getLocale(lang : String)
POST    /api/v1/locale.json                                                             controllers.client.Clients.setLocale(lang : String)

GET     /api/v1/languages                                                               controllers.client.Clients.getActiveLanguages()


#ConfigsView
# ConfigsView list (look at the default values for pagination parameters)
GET     /configurations/list			                                                controllers.ConfigsView.list(p:Int ?= 0, s ?= "configKey", o ?= "asc", f ?= "")
GET     /configurations/lsort		                                                    controllers.ConfigsView.lsort()
# Add ConfigsView
GET     /configurations/blank		                                                    controllers.ConfigsView.blank()
POST    /configurations				                                                    controllers.ConfigsView.submit()
# Edit existing ConfigsView
GET     /configurations/sort/:ids	                                                    controllers.ConfigsView.sort(ids:String)
GET     /configurations/:id			                                                    controllers.ConfigsView.edit(id:Long)
POST    /configurations/:id			                                                    controllers.ConfigsView.update(id:Long)
# Delete a ConfigsView
POST    /configurations/:id/delete		                                                controllers.ConfigsView.delete(id:Long)

#JobsView
# JobsView list (look at the default values for pagination parameters)
GET     /jobs/list			                                                            controllers.JobsView.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET     /jobs/lsort		                                                                controllers.JobsView.lsort()
# Add JobsView
GET     /jobs/blank		                                                                controllers.JobsView.blank()
POST    /jobs				                                                            controllers.JobsView.submit()
# Edit existing JobsView
GET     /jobs/sort/:ids	                                                                controllers.JobsView.sort(ids:String)
GET     /jobs/:id			                                                            controllers.JobsView.edit(id:Long)
POST    /jobs/:id			                                                            controllers.JobsView.update(id:Long)
# Delete a JobsView
POST    /jobs/:id/delete		                                                        controllers.JobsView.delete(id:Long)

#InstancesView
# InstancesView list (look at the default values for pagination parameters)
GET     /instances/list			                                                        controllers.InstancesView.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET     /instances/lsort		                                                        controllers.InstancesView.lsort()
# Add InstancesView
GET     /instances/blank		                                                        controllers.InstancesView.blank()
POST    /instances				                                                        controllers.InstancesView.submit()
# Edit existing InstancesView
GET     /instances/sort/:ids	                                                        controllers.InstancesView.sort(ids:String)
GET     /instances/:id			                                                        controllers.InstancesView.edit(id:Integer)
POST    /instances/:id			                                                        controllers.InstancesView.update(id:Integer)
# Delete a InstancesView
POST    /instances/:id/delete		                                                    controllers.InstancesView.delete(id:Integer)

#UsersView
# UsersView list (look at the default values for pagination parameters)
GET     /users/list			                                                            controllers.UsersView.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
#GET    /users/lsort		                                                            controllers.UsersView.lsort()
# Add UsersView
# Edit existing UsersView
#GET    /users/sort/:ids	                                                            controllers.UsersView.sort(ids:String)
GET     /users/:id			                                                            controllers.UsersView.edit(id:Long)
POST    /users/:id			                                                            controllers.UsersView.update(id:Long)
# Delete a UsersView
POST    /users/:id/delete		                                                        controllers.UsersView.delete(id:Long)

#CountriesView
# CountriesView list (look at the default values for pagination parameters)
GET     /countries/list			                                                        controllers.CountriesView.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET     /countries/lsort		                                                        controllers.CountriesView.lsort()
# Add CountriesView
GET     /countries/blank		                                                        controllers.CountriesView.blank()
POST    /countries				                                                        controllers.CountriesView.submit()
# Edit existing CountriesView
GET     /countries/sort/:ids	                                                        controllers.CountriesView.sort(ids:String)
GET     /countries/:id			                                                        controllers.CountriesView.edit(id:Integer)
POST    /countries/:id			                                                        controllers.CountriesView.update(id:Integer)
# Delete a CountriesView
POST    /countries/:id/delete		                                                    controllers.CountriesView.delete(id:Integer)

#LanguagesView
# LanguagesView list (look at the default values for pagination parameters)
GET     /languages/list			                                                        controllers.LanguagesView.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET     /languages/lsort		                                                        controllers.LanguagesView.lsort()
# Add LanguagesView
GET     /languages/blank		                                                        controllers.LanguagesView.blank()
POST    /languages				                                                        controllers.LanguagesView.submit()
# Edit existing LanguagesView
GET     /languages/sort/:ids	                                                        controllers.LanguagesView.sort(ids:String)
GET     /languages/:id			                                                        controllers.LanguagesView.edit(id:Integer)
POST    /languages/:id			                                                        controllers.LanguagesView.update(id:Integer)
# Delete a LanguagesView
POST    /languages/:id/delete		                                                    controllers.LanguagesView.delete(id:Integer)

#AthletesView
# AthletesView list (look at the default values for pagination parameters)
GET     /athletes/list			                                                        controllers.AthletesView.list(p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET     /athletes/lsort		                                                            controllers.AthletesView.lsort()
# Add AthletesView
GET     /athletes/blank		                                                            controllers.AthletesView.blank()
POST    /athletes				                                                        controllers.AthletesView.submit()
# Edit existing theme
GET     /athletes/sort/:ids	                                                            controllers.AthletesView.sort(ids:String)
GET     /athletes/:id			                                                        controllers.AthletesView.edit(id:Integer)
POST    /athletes/:id			                                                        controllers.AthletesView.update(id:Integer)
# Delete a theme
POST    /athletes/:id/delete		                                                    controllers.AthletesView.delete(id:Integer)

#CategoriesView
# CategoriesView list (look at the default values for pagination parameters)
GET     /categories/list			                                                    controllers.CategoriesView.list(categories:Boolean, p:Int ?= 0, s ?= "name", o ?= "asc", f ?= "")
GET     /categories/lsort		                                                        controllers.CategoriesView.lsort()
# Add CategoriesView
GET     /categories/blank		                                                        controllers.CategoriesView.blank(categories:Boolean)
POST    /categories				                                                        controllers.CategoriesView.submit(categories:Boolean)
# Edit existing CategoriesView
GET     /categories/sort/:ids	                                                        controllers.CategoriesView.sort(ids:String)
GET     /categories/:id			                                                        controllers.CategoriesView.edit(id:Integer, categories:Boolean)
POST    /categories/:id			                                                        controllers.CategoriesView.update(id:Integer, categories:Boolean)
# Delete a CategoriesView
POST    /categories/:id/delete		                                                    controllers.CategoriesView.delete(id:Integer, categories:Boolean)

#PostsView
# PostsView list (look at the default values for pagination parameters)
GET     /posts/list			                                                            controllers.PostsView.list(p:Int ?= 0, s ?= "date", o ?= "desc", f ?= "")
GET     /posts/lsort		                                                            controllers.PostsView.lsort()
# Add PostsView
GET     /posts/blank		                                                            controllers.PostsView.blank()
POST    /posts				                                                            controllers.PostsView.submit()
# Edit existing PostsView
GET     /posts/sort/:ids	                                                            controllers.PostsView.sort(ids:String)
GET     /posts/:id			                                                            controllers.PostsView.edit(id:Integer)
POST    /posts/:id			                                                            controllers.PostsView.update(id:Integer)
# Delete a PostsView
POST    /posts/:id/delete		                                                        controllers.PostsView.delete(id:Integer)

# Authenticate
GET     /restricted                                                                     controllers.Application.restricted
GET     /assets/javascript/routes.js                                                    controllers.Application.jsRoutes

GET     /profile                                                                        controllers.Application.profile

GET     /login                                                                          controllers.Application.login
POST    /login                                                                          controllers.Application.doLogin

GET     /logout                                                                         com.feth.play.module.pa.controllers.Authenticate.logout
GET     /authenticate/:provider                                                         com.feth.play.module.pa.controllers.Authenticate.authenticate(provider: String)

GET     /signup                                                                         controllers.Application.signup
POST    /signup                                                                         controllers.Application.doSignup

GET     /accounts/unverified        		                                            controllers.Signup.unverified
GET     /authenticate/:provider/denied    	                                            controllers.Signup.oAuthDenied(provider: String)

GET     /accounts/verify/:token                                                         controllers.Signup.verify(token: String)
GET     /accounts/exists                                                                controllers.Signup.exists

GET     /accounts/password/reset/:token                                                 controllers.Signup.resetPassword(token: String)
POST    /accounts/password/reset                                                        controllers.Signup.doResetPassword

GET    /accounts/password/change                                                        controllers.Account.changePassword
POST   /accounts/password/change                                                        controllers.Account.doChangePassword

GET     /accounts/verify                                                                controllers.Account.verifyEmail

GET     /accounts/add                                                                   controllers.Account.link

GET     /accounts/link                                                                  controllers.Account.askLink
POST    /accounts/link                                                                  controllers.Account.doLink

GET     /accounts/merge                                                                 controllers.Account.askMerge
POST    /accounts/merge                                                                 controllers.Account.doMerge

GET     /login/password/forgot                                                          controllers.Signup.forgotPassword(email: String ?= "")
POST    /login/password/forgot                                                          controllers.Signup.doForgotPassword

#Wistia
POST    /wistia/video                                                                   controllers.Wistia.upload
GET     /wistia/video                                                                   controllers.Wistia.list
GET     /wistia/video/:id                                                               controllers.Wistia.get(id : String)
DELETE  /wistia/video/:id                                                               controllers.Wistia.delete(id : String)
